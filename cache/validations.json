{
  "version": "3.3",
  "log": [
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:29",
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "DoubleEndedQueue",
          "SafeCast",
          "Timers",
          "Address",
          "ECDSA"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:26",
        "version": {
          "withMetadata": "42643bb5d6e687e6cff2427269efe57ba326adefddfde5280e2d649a4fa5c472",
          "withoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d",
          "linkedWithoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d"
        },
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[])",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "GovernorVotes",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Checkpoints",
          "SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            }
          ],
          "types": {
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "IGovernor",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "265ddbacdeb109cd7b51044250c6c989b791d313cb7e765ad12042d2c7f06d23",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:17",
        "version": {
          "withMetadata": "d464fc2bfa4cae22916d6e68e17ac7d55a73c02ef80ce8c99a98b39879ffc0ce",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math",
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "f540c5ecb8ba8ac6cdef0a26f7f84442dcf2ed180f78932be591709682950503",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "902f6c02131ea268490066cb487d4bdab17fc08ccd029580227a74af71725b2c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Timers": {
        "src": "@openzeppelin/contracts/utils/Timers.sol:9",
        "version": {
          "withMetadata": "3484a82bdcd469387c943cfb4fedd869c22bca30e82e9aeef1a2db97c2219c03",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "af3da0a4436b34a900fa302383369e2d9813d1c629eb916a88e801248e2920f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bf61d58fb758125f7fc25381947987a3d4115691e35ab1e23ee1626f683f0685",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "be1f9b002c005ef7d1d12c0bcc1001e41c6267b1b97609e7b710488e2f879e9d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "40b622cc00a92dfb20c3ae9a3defed397643fc22bbb81fe95e62bc82b3f4e5b8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SeniorSupplierProcess": {
        "src": "contracts/SeniorSupplierProcess.sol:6",
        "version": {
          "withMetadata": "c4cc1b6d077c7116ffe8bc230320b49f3bfeada83dcb12cc0ed52dd01857a285",
          "withoutMetadata": "2a765cfd82cc505df3563aede2a7bcd07e07a8380fcc1b864439fdac080b5793",
          "linkedWithoutMetadata": "2a765cfd82cc505df3563aede2a7bcd07e07a8380fcc1b864439fdac080b5793"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newFeedback(string)",
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "feedback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SeniorSupplierProcess",
              "src": "contracts/SeniorSupplierProcess.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "SupplierProcess": {
        "src": "contracts/SupplierProcess.sol:7",
        "version": {
          "withMetadata": "9e1c3eb3b86164c8c23f5741b7ba41aa2dc23bd1e2690a218c223e4c0c9dfb72",
          "withoutMetadata": "b786ebc807f6ad9bd35eb4d2a63041540042468661e8b154b2fe402689b38f56",
          "linkedWithoutMetadata": "b786ebc807f6ad9bd35eb4d2a63041540042468661e8b154b2fe402689b38f56"
        },
        "inherit": [
          "Ownable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "_newServiceSupplier(string,address)",
          "retrieveSuppliers()",
          "verifySeniorSupplier(address)",
          "retrieveSeniorSupplier(uint256)",
          "_revokeSeniorSupplier(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "serviceSuppliers",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Service_Supplier)10142_storage)dyn_storage",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:21"
            },
            {
              "label": "seniorSuppliers",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Senior_Supplier)10151_storage)dyn_storage",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Senior_Supplier)10151_storage)dyn_storage": {
              "label": "struct SupplierProcess.Senior_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Service_Supplier)10142_storage)dyn_storage": {
              "label": "struct SupplierProcess.Service_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Senior_Supplier)10151_storage": {
              "label": "struct SupplierProcess.Senior_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seniorSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Service_Supplier)10142_storage": {
              "label": "struct SupplierProcess.Service_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "serviceSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "reputation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControl": {
        "src": "contracts/board_administration/AdministrativeAccessControl.sol:7",
        "version": {
          "withMetadata": "f1aa6938d5f71835dc2eb1e502ad160d2b337fc47b0b165647d35a894ae846cd",
          "withoutMetadata": "d7157ff0acd5241c3d64e4c9b4c53fe1b9278e5e48feff516471fbd8a557248e",
          "linkedWithoutMetadata": "d7157ff0acd5241c3d64e4c9b4c53fe1b9278e5e48feff516471fbd8a557248e"
        },
        "inherit": [
          "Ownable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string[],address[])",
          "_newBoardMember(string,address)",
          "verifyBoardMember(address)",
          "retrieveBoardMember(uint256)",
          "_revokeBoardMember(uint256,address)",
          "_newSupplier(string,address)",
          "verifySupplier(address)",
          "retrieveSupplier(uint256)",
          "_revokeSupplier(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdministrativeAccessControl",
            "src": "contracts/board_administration/AdministrativeAccessControl.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "boardMembers",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Board_Member)10456_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:18"
            },
            {
              "label": "suppliers",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Supplier)10465_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Board_Member)10456_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Supplier)10465_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Supplier[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Board_Member)10456_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "boardMemberAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Supplier)10465_storage": {
              "label": "struct AdministrativeAccessControl.Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeRecruitmentProcess": {
        "src": "contracts/board_administration/AdministrativeRecruitmentProcess.sol:6",
        "version": {
          "withMetadata": "367d349d302711054605dd419a17780d5554aede46c7cdcd4f682512e96be325",
          "withoutMetadata": "ccb27640e0a6964d0caf06097c034cebf8a4428b6144264d3c7eda84ef59e462",
          "linkedWithoutMetadata": "ccb27640e0a6964d0caf06097c034cebf8a4428b6144264d3c7eda84ef59e462"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newContest(string)",
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "contest",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "AdministrativeRecruitmentProcess",
              "src": "contracts/board_administration/AdministrativeRecruitmentProcess.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControlInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyBoardMember(address)",
          "verifySupplier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceProtocol": {
        "src": "contracts/governance/GovernanceProtocol.sol:43",
        "version": {
          "withMetadata": "e2b8260593961280e5b29bbe789821cfe86cf7925dc3eb5b3b78f2d2add25505",
          "withoutMetadata": "eadce812c5bb058c5ddc1c079ea19ea100e4c360f409a9ad9254923d03686791",
          "linkedWithoutMetadata": "eadce812c5bb058c5ddc1c079ea19ea100e4c360f409a9ad9254923d03686791"
        },
        "inherit": [
          "GovernorTimelockControl",
          "GovernorVotesQuorumFraction",
          "GovernorVotes",
          "GovernorCountingSimple",
          "GovernorSettings",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "AdministrativePropose(address[],uint256[],bytes[],string)",
          "supplierPropose(address[],uint256[],bytes[],string,string)",
          "seniorSupplierPropose(address[],uint256[],bytes[],string)",
          "castBoardVoteWithReason(uint256,uint8,string)",
          "retrieveProposalIndex()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceProtocol",
            "src": "contracts/governance/GovernanceProtocol.sol:76"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:53"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeContract",
            "src": "contracts/governance/GovernanceProtocol.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeAccessControlAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeAccessControlContract",
            "src": "contracts/governance/GovernanceProtocol.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "supplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "supplierProcessInterface",
            "src": "contracts/governance/GovernanceProtocol.sol:68"
          },
          {
            "kind": "state-variable-assignment",
            "name": "seniorSupplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "proposalIndex",
            "src": "contracts/governance/GovernanceProtocol.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            },
            {
              "label": "AdministrativeProcessAddress",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:53"
            },
            {
              "label": "administrativeContract",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AdministrativeInterface)10912",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:55"
            },
            {
              "label": "AdministrativeAccessControlAddress",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:59"
            },
            {
              "label": "administrativeAccessControlContract",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(AdministrativeAccessControlInterface)10927",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:61"
            },
            {
              "label": "supplierProcessAddress",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:67"
            },
            {
              "label": "supplierProcessInterface",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(SupplierProcessInterface)10935",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:68"
            },
            {
              "label": "seniorSupplierProcessAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:71"
            },
            {
              "label": "proposalIndex",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(AdministrativeAccessControlInterface)10927": {
              "label": "contract AdministrativeAccessControlInterface",
              "numberOfBytes": "20"
            },
            "t_contract(AdministrativeInterface)10912": {
              "label": "contract AdministrativeInterface",
              "numberOfBytes": "20"
            },
            "t_contract(SupplierProcessInterface)10935": {
              "label": "contract SupplierProcessInterface",
              "numberOfBytes": "20"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "SupplierProcessInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifySeniorSupplier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceToken": {
        "src": "contracts/governance/GovernanceToken.sol:13",
        "version": {
          "withMetadata": "2c3db29285d1c7ad632adc88abde96e5d7d4b9a27f14dcede545af97882cb3d6",
          "withoutMetadata": "7e821b34ce7c4bb0dd41c24b602ff249d20027ba7ce314bd6446e8b5290bfb56",
          "linkedWithoutMetadata": "7e821b34ce7c4bb0dd41c24b602ff249d20027ba7ce314bd6446e8b5290bfb56"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "_mintToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceToken",
            "src": "contracts/governance/GovernanceToken.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/governance/GovernanceToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            },
            {
              "label": "maxSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernanceToken",
              "src": "contracts/governance/GovernanceToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:29",
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "DoubleEndedQueue",
          "SafeCast",
          "Timers",
          "Address",
          "ECDSA"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:26",
        "version": {
          "withMetadata": "42643bb5d6e687e6cff2427269efe57ba326adefddfde5280e2d649a4fa5c472",
          "withoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d",
          "linkedWithoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d"
        },
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[])",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "GovernorVotes",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Checkpoints",
          "SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            }
          ],
          "types": {
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "IGovernor",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "265ddbacdeb109cd7b51044250c6c989b791d313cb7e765ad12042d2c7f06d23",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:17",
        "version": {
          "withMetadata": "d464fc2bfa4cae22916d6e68e17ac7d55a73c02ef80ce8c99a98b39879ffc0ce",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math",
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "f540c5ecb8ba8ac6cdef0a26f7f84442dcf2ed180f78932be591709682950503",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "902f6c02131ea268490066cb487d4bdab17fc08ccd029580227a74af71725b2c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Timers": {
        "src": "@openzeppelin/contracts/utils/Timers.sol:9",
        "version": {
          "withMetadata": "3484a82bdcd469387c943cfb4fedd869c22bca30e82e9aeef1a2db97c2219c03",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "af3da0a4436b34a900fa302383369e2d9813d1c629eb916a88e801248e2920f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bf61d58fb758125f7fc25381947987a3d4115691e35ab1e23ee1626f683f0685",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "be1f9b002c005ef7d1d12c0bcc1001e41c6267b1b97609e7b710488e2f879e9d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "40b622cc00a92dfb20c3ae9a3defed397643fc22bbb81fe95e62bc82b3f4e5b8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SupplierProcess": {
        "src": "contracts/SupplierProcess.sol:7",
        "version": {
          "withMetadata": "29359d47c3c53517a84c34be99f7a3ae396fd724bc22cad85ab2b3bcbd6aa609",
          "withoutMetadata": "a47a38fc1b933043b5c7a045903307e939f1e3475a0f28718fde0f3595df3272",
          "linkedWithoutMetadata": "a47a38fc1b933043b5c7a045903307e939f1e3475a0f28718fde0f3595df3272"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newServiceSupplier(string,address)",
          "retrieveSuppliers()",
          "_newSeniorSupplier(string,address)",
          "verifySeniorSupplier(address)",
          "retrieveSeniorSupplier(uint256)",
          "_revokeSeniorSupplier(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "serviceSuppliers",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Service_Supplier)10106_storage)dyn_storage",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:19"
            },
            {
              "label": "seniorSuppliers",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Senior_Supplier)10115_storage)dyn_storage",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Senior_Supplier)10115_storage)dyn_storage": {
              "label": "struct SupplierProcess.Senior_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Service_Supplier)10106_storage)dyn_storage": {
              "label": "struct SupplierProcess.Service_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Senior_Supplier)10115_storage": {
              "label": "struct SupplierProcess.Senior_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seniorSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Service_Supplier)10106_storage": {
              "label": "struct SupplierProcess.Service_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "serviceSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "reputation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControl": {
        "src": "contracts/board_administration/AdministrativeAccessControl.sol:7",
        "version": {
          "withMetadata": "fd1e9104b931df7868972c2370f2ac8e654858d542954a9cb2b40ed95a462e8c",
          "withoutMetadata": "d7157ff0acd5241c3d64e4c9b4c53fe1b9278e5e48feff516471fbd8a557248e",
          "linkedWithoutMetadata": "d7157ff0acd5241c3d64e4c9b4c53fe1b9278e5e48feff516471fbd8a557248e"
        },
        "inherit": [
          "Ownable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string[],address[])",
          "_newBoardMember(string,address)",
          "verifyBoardMember(address)",
          "retrieveBoardMember(uint256)",
          "_revokeBoardMember(uint256,address)",
          "_newSupplier(string,address)",
          "verifySupplier(address)",
          "retrieveSupplier(uint256)",
          "_revokeSupplier(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdministrativeAccessControl",
            "src": "contracts/board_administration/AdministrativeAccessControl.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "boardMembers",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Board_Member)10441_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:17"
            },
            {
              "label": "suppliers",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Supplier)10450_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Board_Member)10441_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Supplier)10450_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Supplier[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Board_Member)10441_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "boardMemberAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Supplier)10450_storage": {
              "label": "struct AdministrativeAccessControl.Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControlInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyBoardMember(address)",
          "verifySupplier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceProtocol": {
        "src": "contracts/governance/GovernanceProtocol.sol:43",
        "version": {
          "withMetadata": "256665bbf9c5360b2b0ea0b5fc101e167049ac8699046aa50c8a5e184e0b19d9",
          "withoutMetadata": "eadce812c5bb058c5ddc1c079ea19ea100e4c360f409a9ad9254923d03686791",
          "linkedWithoutMetadata": "eadce812c5bb058c5ddc1c079ea19ea100e4c360f409a9ad9254923d03686791"
        },
        "inherit": [
          "GovernorTimelockControl",
          "GovernorVotesQuorumFraction",
          "GovernorVotes",
          "GovernorCountingSimple",
          "GovernorSettings",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "AdministrativePropose(address[],uint256[],bytes[],string)",
          "supplierPropose(address[],uint256[],bytes[],string,string)",
          "seniorSupplierPropose(address[],uint256[],bytes[],string)",
          "castBoardVoteWithReason(uint256,uint8,string)",
          "retrieveProposalIndex()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceProtocol",
            "src": "contracts/governance/GovernanceProtocol.sol:76"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:53"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeContract",
            "src": "contracts/governance/GovernanceProtocol.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeAccessControlAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeAccessControlContract",
            "src": "contracts/governance/GovernanceProtocol.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "supplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:67"
          },
          {
            "kind": "state-variable-assignment",
            "name": "supplierProcessInterface",
            "src": "contracts/governance/GovernanceProtocol.sol:68"
          },
          {
            "kind": "state-variable-assignment",
            "name": "seniorSupplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "proposalIndex",
            "src": "contracts/governance/GovernanceProtocol.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            },
            {
              "label": "AdministrativeProcessAddress",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:53"
            },
            {
              "label": "administrativeContract",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AdministrativeInterface)10861",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:55"
            },
            {
              "label": "AdministrativeAccessControlAddress",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:59"
            },
            {
              "label": "administrativeAccessControlContract",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(AdministrativeAccessControlInterface)10876",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:61"
            },
            {
              "label": "supplierProcessAddress",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:67"
            },
            {
              "label": "supplierProcessInterface",
              "offset": 0,
              "slot": "18",
              "type": "t_contract(SupplierProcessInterface)10884",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:68"
            },
            {
              "label": "seniorSupplierProcessAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:71"
            },
            {
              "label": "proposalIndex",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(AdministrativeAccessControlInterface)10876": {
              "label": "contract AdministrativeAccessControlInterface",
              "numberOfBytes": "20"
            },
            "t_contract(AdministrativeInterface)10861": {
              "label": "contract AdministrativeInterface",
              "numberOfBytes": "20"
            },
            "t_contract(SupplierProcessInterface)10884": {
              "label": "contract SupplierProcessInterface",
              "numberOfBytes": "20"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "SupplierProcessInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:28",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifySeniorSupplier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceToken": {
        "src": "contracts/governance/GovernanceToken.sol:13",
        "version": {
          "withMetadata": "137557faaf14c0339f217e4ee4561154efd92f27a26ac97ffac3d7f90b580c9f",
          "withoutMetadata": "f40a2b8b755e0d77039625a9ea7df6bb7c1f44ea06082174c36f0609146ea4ca",
          "linkedWithoutMetadata": "f40a2b8b755e0d77039625a9ea7df6bb7c1f44ea06082174c36f0609146ea4ca"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()",
          "_mintToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceToken",
            "src": "contracts/governance/GovernanceToken.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "s_maxSupply",
            "src": "contracts/governance/GovernanceToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            },
            {
              "label": "s_maxSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernanceToken",
              "src": "contracts/governance/GovernanceToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:29",
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "DoubleEndedQueue",
          "SafeCast",
          "Timers",
          "Address",
          "ECDSA"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalThreshold()",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:78"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:26",
        "version": {
          "withMetadata": "42643bb5d6e687e6cff2427269efe57ba326adefddfde5280e2d649a4fa5c472",
          "withoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d",
          "linkedWithoutMetadata": "acbdb8339c4f58a2befca10b107daa3f0729ac5b72ece3460b13fcffa1ef811d"
        },
        "inherit": [
          "IERC1155Receiver",
          "IERC721Receiver",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[])",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "GovernorVotes",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernor",
          "EIP712",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Checkpoints",
          "SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            }
          ],
          "types": {
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "IGovernor",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "265ddbacdeb109cd7b51044250c6c989b791d313cb7e765ad12042d2c7f06d23",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:17",
        "version": {
          "withMetadata": "d464fc2bfa4cae22916d6e68e17ac7d55a73c02ef80ce8c99a98b39879ffc0ce",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math",
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "f540c5ecb8ba8ac6cdef0a26f7f84442dcf2ed180f78932be591709682950503",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "902f6c02131ea268490066cb487d4bdab17fc08ccd029580227a74af71725b2c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Timers": {
        "src": "@openzeppelin/contracts/utils/Timers.sol:9",
        "version": {
          "withMetadata": "3484a82bdcd469387c943cfb4fedd869c22bca30e82e9aeef1a2db97c2219c03",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "af3da0a4436b34a900fa302383369e2d9813d1c629eb916a88e801248e2920f4",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bf61d58fb758125f7fc25381947987a3d4115691e35ab1e23ee1626f683f0685",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "be1f9b002c005ef7d1d12c0bcc1001e41c6267b1b97609e7b710488e2f879e9d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "40b622cc00a92dfb20c3ae9a3defed397643fc22bbb81fe95e62bc82b3f4e5b8",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SeniorSupplierProcess": {
        "src": "contracts/SeniorSupplierProcess.sol:6",
        "version": {
          "withMetadata": "38842989c2710f5d8d9c2185cddffcb9586a8467fa3ff828bfc985883fcfea4b",
          "withoutMetadata": "2a765cfd82cc505df3563aede2a7bcd07e07a8380fcc1b864439fdac080b5793",
          "linkedWithoutMetadata": "2a765cfd82cc505df3563aede2a7bcd07e07a8380fcc1b864439fdac080b5793"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newFeedback(string)",
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "feedback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SeniorSupplierProcess",
              "src": "contracts/SeniorSupplierProcess.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControlInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyBoardMember(address)",
          "verifySupplier(address)",
          "verifySeniorSupplier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SupplierProcess": {
        "src": "contracts/SupplierProcess.sol:13",
        "version": {
          "withMetadata": "74c506f07babe53d773a06e06dae6af5c64af4b16df2ead2efd3e40dee4ce0b9",
          "withoutMetadata": "ca4f877220ffc3ebc9921937ff43f56afd26315f667b326783cb0266f6ff1f21",
          "linkedWithoutMetadata": "ca4f877220ffc3ebc9921937ff43f56afd26315f667b326783cb0266f6ff1f21"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newServiceSupplier(string,address)",
          "retrieveSuppliers()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeAccessControlAddress",
            "src": "contracts/SupplierProcess.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeAccessControlContract",
            "src": "contracts/SupplierProcess.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "serviceSuppliers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(Service_Supplier)10137_storage)dyn_storage",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:19"
            },
            {
              "label": "AdministrativeAccessControlAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:22"
            },
            {
              "label": "administrativeAccessControlContract",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AdministrativeAccessControlInterface)10128",
              "contract": "SupplierProcess",
              "src": "contracts/SupplierProcess.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Service_Supplier)10137_storage)dyn_storage": {
              "label": "struct SupplierProcess.Service_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_contract(AdministrativeAccessControlInterface)10128": {
              "label": "contract AdministrativeAccessControlInterface",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Service_Supplier)10137_storage": {
              "label": "struct SupplierProcess.Service_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "serviceSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "reputation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeAccessControl": {
        "src": "contracts/board_administration/AdministrativeAccessControl.sol:7",
        "version": {
          "withMetadata": "066a00f87865a35c30ea03b708edb27b731aa9e3a3e6498419e1b12d88b66eee",
          "withoutMetadata": "573bcf116df205e29fa2d218fd2aed6b134d3909c594622bdcd765d2432bd071",
          "linkedWithoutMetadata": "573bcf116df205e29fa2d218fd2aed6b134d3909c594622bdcd765d2432bd071"
        },
        "inherit": [
          "Ownable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string[],address[])",
          "_newBoardMember(string,address)",
          "verifyBoardMember(address)",
          "retrieveBoardMember(uint256)",
          "_revokeBoardMember(uint256,address)",
          "_newSupplier(string,address)",
          "verifySupplier(address)",
          "retrieveSupplier(uint256)",
          "_revokeSupplier(uint256,address)",
          "_newSeniorSupplier(string,address)",
          "verifySeniorSupplier(address)",
          "retrieveSeniorSupplier(uint256)",
          "_revokeSeniorSupplier(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AdministrativeAccessControl",
            "src": "contracts/board_administration/AdministrativeAccessControl.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "boardMembers",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(Board_Member)10304_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:20"
            },
            {
              "label": "suppliers",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_struct(Supplier)10313_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:26"
            },
            {
              "label": "seniorSuppliers",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(Senior_Supplier)10322_storage)dyn_storage",
              "contract": "AdministrativeAccessControl",
              "src": "contracts/board_administration/AdministrativeAccessControl.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Board_Member)10304_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Senior_Supplier)10322_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Senior_Supplier[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Supplier)10313_storage)dyn_storage": {
              "label": "struct AdministrativeAccessControl.Supplier[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Board_Member)10304_storage": {
              "label": "struct AdministrativeAccessControl.Board_Member",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "boardMemberAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Senior_Supplier)10322_storage": {
              "label": "struct AdministrativeAccessControl.Senior_Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seniorSupplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Supplier)10313_storage": {
              "label": "struct AdministrativeAccessControl.Supplier",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplierAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeRecruitmentProcess": {
        "src": "contracts/board_administration/AdministrativeRecruitmentProcess.sol:6",
        "version": {
          "withMetadata": "e995748bc04c7f556af05ccbfc6ed74d4c994158ab00a35ef1c60281daf55418",
          "withoutMetadata": "ccb27640e0a6964d0caf06097c034cebf8a4428b6144264d3c7eda84ef59e462",
          "linkedWithoutMetadata": "ccb27640e0a6964d0caf06097c034cebf8a4428b6144264d3c7eda84ef59e462"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "newContest(string)",
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "contest",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "AdministrativeRecruitmentProcess",
              "src": "contracts/board_administration/AdministrativeRecruitmentProcess.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdministrativeInterface": {
        "src": "contracts/governance/GovernanceProtocol.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "retrieve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceProtocol": {
        "src": "contracts/governance/GovernanceProtocol.sol:41",
        "version": {
          "withMetadata": "010c352bdbcb25c72efe4cb550cd6e00b904e8c044277430de054b30c43bfb6c",
          "withoutMetadata": "a5d8678d219e4bdc971be74240274c092b4a9cd815254916bb12a9fa1a16067d",
          "linkedWithoutMetadata": "a5d8678d219e4bdc971be74240274c092b4a9cd815254916bb12a9fa1a16067d"
        },
        "inherit": [
          "GovernorTimelockControl",
          "GovernorVotesQuorumFraction",
          "GovernorVotes",
          "GovernorCountingSimple",
          "GovernorSettings",
          "Governor",
          "IERC1155Receiver",
          "IERC721Receiver",
          "IGovernorTimelock",
          "IGovernor",
          "EIP712",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "AdministrativePropose(address[],uint256[],bytes[],string)",
          "supplierPropose(address[],uint256[],bytes[],string,string)",
          "seniorSupplierPropose(address[],uint256[],bytes[],string)",
          "castBoardVoteWithReason(uint256,uint8,string)",
          "retrieveProposalIndex()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "proposalThreshold()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceProtocol",
            "src": "contracts/governance/GovernanceProtocol.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeContract",
            "src": "contracts/governance/GovernanceProtocol.sol:53"
          },
          {
            "kind": "state-variable-assignment",
            "name": "AdministrativeAccessControlAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:57"
          },
          {
            "kind": "state-variable-assignment",
            "name": "administrativeAccessControlContract",
            "src": "contracts/governance/GovernanceProtocol.sol:59"
          },
          {
            "kind": "state-variable-assignment",
            "name": "supplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:64"
          },
          {
            "kind": "state-variable-assignment",
            "name": "seniorSupplierProcessAddress",
            "src": "contracts/governance/GovernanceProtocol.sol:65"
          },
          {
            "kind": "state-variable-assignment",
            "name": "proposalIndex",
            "src": "contracts/governance/GovernanceProtocol.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:45"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:47"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(Bytes32Deque)9759_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(History)6052_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:20"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TimelockController)3004",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            },
            {
              "label": "AdministrativeProcessAddress",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:51"
            },
            {
              "label": "administrativeContract",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(AdministrativeInterface)10944",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:53"
            },
            {
              "label": "AdministrativeAccessControlAddress",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:57"
            },
            {
              "label": "administrativeAccessControlContract",
              "offset": 0,
              "slot": "16",
              "type": "t_contract(AdministrativeAccessControlInterface)10966",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:59"
            },
            {
              "label": "supplierProcessAddress",
              "offset": 0,
              "slot": "17",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:64"
            },
            {
              "label": "seniorSupplierProcessAddress",
              "offset": 0,
              "slot": "18",
              "type": "t_address",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:65"
            },
            {
              "label": "proposalIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "GovernanceProtocol",
              "src": "contracts/governance/GovernanceProtocol.sol:67"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)6047_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(AdministrativeAccessControlInterface)10966": {
              "label": "contract AdministrativeAccessControlInterface",
              "numberOfBytes": "20"
            },
            "t_contract(AdministrativeInterface)10944": {
              "label": "contract AdministrativeInterface",
              "numberOfBytes": "20"
            },
            "t_contract(TimelockController)3004": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)563_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3025_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BlockNumber)6704_storage": {
              "label": "struct Timers.BlockNumber",
              "members": [
                {
                  "label": "_deadline",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)9759_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint)6047_storage": {
              "label": "struct Checkpoints.Checkpoint",
              "members": [
                {
                  "label": "_blockNumber",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(History)6052_storage": {
              "label": "struct Checkpoints.History",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint)6047_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)563_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_struct(BlockNumber)6704_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3025_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "GovernanceToken": {
        "src": "contracts/governance/GovernanceToken.sol:13",
        "version": {
          "withMetadata": "2382ef09805ff06868ca427f9034b4e12c841d905ea43c49d09c533f5235f3a4",
          "withoutMetadata": "89385f71e723bb4b74348a8f7ee3c20e4e9ce1e9413c3902dc3425ed6d661aa5",
          "linkedWithoutMetadata": "89385f71e723bb4b74348a8f7ee3c20e4e9ce1e9413c3902dc3425ed6d661aa5"
        },
        "inherit": [
          "ERC20Votes",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceToken",
            "src": "contracts/governance/GovernanceToken.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "s_maxSupply",
            "src": "contracts/governance/GovernanceToken.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6299_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)4871_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            },
            {
              "label": "s_maxSupply",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernanceToken",
              "src": "contracts/governance/GovernanceToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)4871_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)4871_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6299_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)4871_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6299_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "TimeLock": {
        "src": "contracts/governance/TimeLock.sol:11",
        "version": {
          "withMetadata": "c1df79bc2ba9c242c708a95b53ffdd9f117347f46b82b6f53f90f53961b56efd",
          "withoutMetadata": "0c5234991ccbbba6a4e0013f5ad11dec9512bf90eda714089ddd94157835ea56",
          "linkedWithoutMetadata": "0c5234991ccbbba6a4e0013f5ad11dec9512bf90eda714089ddd94157835ea56"
        },
        "inherit": [
          "TimelockController",
          "IERC1155Receiver",
          "IERC721Receiver",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimeLock",
            "src": "contracts/governance/TimeLock.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}